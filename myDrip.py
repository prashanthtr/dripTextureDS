import numpy as np
#import seaborn as sns
from scipy import signal
import math
#import sys

from genericsynth import synthInterface as SI

'''
1. The drip texture is generated by a continuous frequency sweep from start frequency (cf) to a range (sweep) of frequency movement away from cf. <br>
2. The model is specified by four parameters, CF, sweep, decay, and decay variation <br>
3. CF is specified at the user level.
3. Three synthesizer specific parameters control the timbre of the drip sound: <br>
    3.1 Sweep : Range of frequencies traveresed for the frequency sweep.
    3.2 Decay : Controls the time after which the drip signal is attentuated.
    3.3 DecayVar : Variation on the center decay time <br>
4. A synthesizer loop runs through the parameter values for a specified duration to generate drip audio samples
'''

class MyDrip(SI.MySoundModel) :

        def __init__(self, cf=220, sweep=110, startAmp=0.5, ampRange=0.25) :
                SI. MySoundModel.__init__(self)
                #create a dictionary of the parameters this synth will use
                self.__addParam__("cf", 110, 440, cf)
                self.__addParam__("sweep", 55, 220, sweep)
                self.__addParam__("startAmp",0.05, 2, startAmp)
                self.__addParam__("ampRange",0, 1, ampRange)

        '''
        Override of base model method
        Frequency sweeper for a drip sound
        A = sine wave amplitude
        sr = sample rate (Hz)
        cf = initial frequency (Hz)
        sweep = sweep range (Hz)
        startAmp = initial amplitude
        ampRange = Range of starting amplitude
        '''
        def generate(self, sigLenSecs):

                '''Interface level parameters'''
                # notation for this method
                cf=self.getParam("cf")
                sweep =self.getParam("sweep")
                startAmp = self.getParam("startAmp")
                ampRange = self.getParam("ampRange")

                '''Synth variables'''
                start_Hz = cf         # starting frequency for sweep
                stop_Hz = cf + sweep      # starting + sweep range
                start_amp = np.random.normal(startAmp, ampRange) # start amplitude + range
                stop_amp = 0.05                       # ending amplitude for drip

                '''Synth level parameters'''
                cutOff = 0.05 + 0.15*np.random.random() # Duration of envelopes for DRIP
                phase_increment = 2 * math.pi * start_Hz / 16000     # phase increment per sample
                numSamples = int(1 * 16000)        # 1 second * 16000 sample rate
                phase = 0
                phi = 0
                synth_output = []

                amp_env = SI.gesture(start_amp, stop_amp, cutOff,numSamples)
                freq_sweep = SI.gesture(start_Hz, stop_Hz, cutOff, numSamples)

                '''Drip Sample generation'''
                for index in range(numSamples):

                        A = amp_env[index]
                        val = A * math.sin(phase + phi);    # output sample value for current sample
                        phi += phase_increment;             # increment phase accumulator
                        inst_f = freq_sweep[index]
                        #f += freq_increment;                # increment instantaneous frequency
                        phase_increment = 2 * math.pi * inst_f / 16000;  # re-calculate phase
                        synth_output.append(val)

                return synth_output